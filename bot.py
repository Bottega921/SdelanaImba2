import os
import time
import random
import logging
import asyncio
import asyncpg
import requests
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from faker import Faker
from pathlib import Path
from dotenv import load_dotenv
from webdriver_manager.chrome import ChromeDriverManager  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ChromeDriver
import re

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='mamba_bot.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
VAK_SMS_API_KEY = os.getenv("VAK_SMS_API_KEY")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
DB_CONFIG = {"dsn": os.getenv("DB_URL")}
PHOTO_DIR = Path("photos")
PROXY_LIST = os.getenv("PROXY_LIST", "").split(",")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")
    raise ValueError("TELEGRAM_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")
if not VAK_SMS_API_KEY:
    logger.error("VAK_SMS_API_KEY –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")
    raise ValueError("VAK_SMS_API_KEY –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")
if not ADMIN_CHAT_ID:
    logger.error("ADMIN_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")
    raise ValueError("ADMIN_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")
if not DB_CONFIG["dsn"]:
    logger.error("DB_URL –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")
    raise ValueError("DB_URL –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")

logger.info("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

fake = Faker('ru_RU')

# –í–∞—Ä–∏–∞–Ω—Ç—ã —É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω–æ-–ª–∞—Å–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–º—ë–Ω
NAME_VARIATIONS = {
    "–ê–Ω–∞—Å—Ç–∞—Å–∏—è": ["–ù–∞—Å—Ç—è", "–ù–∞—Å—Ç–µ–Ω—å–∫–∞", "–ù–∞—Å—Ç–∞—Å—å—è", "–ê—Å—è"],
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞": ["–ö–∞—Ç—è", "–ö–∞—Ç–µ—Ä–∏–Ω–∞", "–ö–∞—Ç—é—à–∞", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞"],
    "–ú–∞—Ä–∏—è": ["–ú–∞—à–∞", "–ú–∞—à–µ–Ω—å–∫–∞", "–ú–∞—Ä–∏—à–∫–∞", "–ú–∞—Ä—É—Å—è"],
}

# 10 —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ "Telegram"
SPAM_TEMPLATES = [
    "–ü—Ä–∏–≤–µ—Ç, {name}! üì© –¢—É—Ç –Ω–µ—É–¥–æ–±–Ω–æ –ø–∏—Å–∞—Ç—å, –¥–∞–≤–∞–π –≤ –¥—Ä—É–≥–æ–π —á–∞—Ç: [–∫–æ–Ω—Ç–∞–∫—Ç]",
    "–•–∞–π, {name}! üì≤ –õ—É—á—à–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ: [–∫–æ–Ω—Ç–∞–∫—Ç]",
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {name}! ‚úâÔ∏è –ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –¥—Ä—É–≥–æ–π —á–∞—Ç, —Ç—É—Ç –Ω–µ –æ—á–µ–Ω—å: [–∫–æ–Ω—Ç–∞–∫—Ç]",
    "–ü—Ä–∏–≤–µ—Ç–∏–∫, {name}! üåê –î–∞–≤–∞–π –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ, —Ç–∞–º –ø—Ä–æ—â–µ: [–∫–æ–Ω—Ç–∞–∫—Ç]",
    "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {name}! üîó –ü–µ—Ä–µ–π–¥—ë–º –≤ –¥—Ä—É–≥–æ–π —á–∞—Ç? –í–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç: [–∫–æ–Ω—Ç–∞–∫—Ç]",
    "–•–∞–π, {name}! üí¨ –í –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ —É–¥–æ–±–Ω–µ–µ –±–æ–ª—Ç–∞—Ç—å: [–∫–æ–Ω—Ç–∞–∫—Ç]",
    "–ü—Ä–∏–≤–µ—Ç, {name}! üì± –î–∞–≤–∞–π –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ, —Ç—É—Ç –Ω–µ–∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ: [–∫–æ–Ω—Ç–∞–∫—Ç]",
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! üìß –ù–∞–ø–∏—à–∏ –≤ –¥—Ä—É–≥–æ–π —á–∞—Ç: [–∫–æ–Ω—Ç–∞–∫—Ç]",
    "–ü—Ä–∏–≤–µ—Ç, {name}! üåç –õ—É—á—à–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ: [–∫–æ–Ω—Ç–∞–∫—Ç]",
    "–•–∞–π, {name}! üíå –î–∞–≤–∞–π –æ–±—â–∞—Ç—å—Å—è –≤ –¥—Ä—É–≥–æ–º —á–∞—Ç–µ: [–∫–æ–Ω—Ç–∞–∫—Ç]"
]

def get_cancel_keyboard():
    keyboard = [["–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ üö´"]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def send_log(message: str, context: ContextTypes.DEFAULT_TYPE = None):
    logger.info(message)
    if context and context.bot:
        try:
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–õ–æ–≥: {message}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ Telegram: {e}")

async def check_vak_sms_balance():
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º v1
        v1_response = requests.get(f"https://vak-sms.com/api/balance?apiKey={VAK_SMS_API_KEY}", timeout=10)
        v1_response.raise_for_status()
        v1_data = v1_response.json()
        v1_balance = float(v1_data.get("balance", 0))
        await send_log(f"Vak SMS v1 balance: {v1_balance} —Ä—É–±–ª–µ–π")
        if v1_balance >= 10:
            return True

        # –ï—Å–ª–∏ v1 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –±–∞–ª–∞–Ω—Å < 10, –ø–æ–ø—Ä–æ–±—É–µ–º v2
        v2_response = requests.get(f"https://api.vak-sms.com/v2/balance?apiKey={VAK_SMS_API_KEY}", timeout=10)
        v2_response.raise_for_status()
        v2_data = v2_response.json()
        v2_balance = float(v2_data.get("balance", 0))
        await send_log(f"Vak SMS v2 balance: {v2_balance} —Ä—É–±–ª–µ–π")
        if v2_balance >= 10:
            return True

        await send_log(f"–ë–∞–ª–∞–Ω—Å Vak SMS ({v1_balance} –∏–ª–∏ {v2_balance} —Ä—É–±–ª–µ–π) –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–º–µ—Ä–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10 —Ä—É–±–ª–µ–π).")
        return False
    except Exception as e:
        await send_log(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ Vak SMS: {e}. –û—Ç–≤–µ—Ç v1: {v1_response.text if 'v1_response' in locals() else '–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞'}, –û—Ç–≤–µ—Ç v2: {v2_response.text if 'v2_response' in locals() else '–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞'}")
        return False

async def get_vak_sms_number():
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º v1
        v1_response = requests.get(
            f"https://vak-sms.com/api/getNumber?apiKey={VAK_SMS_API_KEY}&service=ms&country=ru",
            timeout=10
        )
        v1_response.raise_for_status()
        v1_data = v1_response.json()
        if v1_data.get("tel"):
            await send_log(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ v1: {v1_data['tel']}")
            return v1_data["tel"], v1_data["id"], "v1"

        # –ï—Å–ª–∏ v1 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º v2
        v2_response = requests.get(
            f"https://api.vak-sms.com/v2/getNumber?apiKey={VAK_SMS_API_KEY}&service=ms&country=ru",
            timeout=10
        )
        v2_response.raise_for_status()
        v2_data = v2_response.json()
        if v2_data.get("tel"):
            await send_log(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ v2: {v2_data['tel']}")
            return v2_data["tel"], v2_data["id"], "v2"

        raise Exception("Vak SMS error: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ v1 –∏–ª–∏ v2")
    except Exception as e:
        await send_log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞: {e}. –û—Ç–≤–µ—Ç v1: {v1_response.text if 'v1_response' in locals() else '–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞'}, –û—Ç–≤–µ—Ç v2: {v2_response.text if 'v2_response' in locals() else '–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞'}")
        raise

async def get_vak_sms_code(number_id, api_version):
    for _ in range(5):
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –≤–µ—Ä—Å–∏—é API –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —á–µ—Ä–µ–∑ –∫–∞–∫—É—é –≤–µ—Ä—Å–∏—é –±—ã–ª –ø–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä
            base_url = "https://vak-sms.com/api" if api_version == "v1" else "https://api.vak-sms.com/v2"
            response = requests.get(
                f"{base_url}/getCode?apiKey={VAK_SMS_API_KEY}&id={number_id}",
                timeout=10
            )
            response.raise_for_status()
            data = response.json()
            if data.get("code"):
                await send_log(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ —á–µ—Ä–µ–∑ {api_version}: {data['code']}")
                return data["code"]
            time.sleep(10)
        except Exception as e:
            await send_log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ —á–µ—Ä–µ–∑ {api_version}: {e}. –û—Ç–≤–µ—Ç: {response.text if 'response' in locals() else '–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞'}")
    return None

async def init_db():
    try:
        conn = await asyncpg.connect(**DB_CONFIG)
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS profiles (
                id SERIAL PRIMARY KEY,
                login TEXT,
                password TEXT,
                name TEXT,
                age INTEGER,
                description TEXT,
                status TEXT,
                likes_count INTEGER,
                chats_count INTEGER,
                token TEXT,
                photos TEXT[]
            );
            CREATE TABLE IF NOT EXISTS settings (
                key TEXT PRIMARY KEY,
                value TEXT
            );
        """)
        await send_log("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
        return conn
    except Exception as e:
        await send_log(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

def get_main_menu():
    keyboard = [
        ["–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üìù", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–∞–π–∫–∏–Ω–≥ üëç"],
        ["–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω üîë", "–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üñºÔ∏è"],
        ["–£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚ùå", "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ø–∞–º üí¨"],
        ["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def setup_driver(proxy=None):
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument(f"user-agent={fake.user_agent()}")
    if proxy:
        chrome_options.add_argument(f"--proxy-server={proxy}")
    service = Service(ChromeDriverManager().install())  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ChromeDriverManager
    driver = webdriver.Chrome(service=service, options=chrome_options)
    return driver

async def register_profile(driver, conn, settings):
    try:
        base_name = next((s['value'] for s in settings if s['key'] == 'name'), '–ê–Ω–∞—Å—Ç–∞—Å–∏—è')
        age = int(next((s['value'] for s in settings if s['key'] == 'age'), '25'))
        login = f"{fake.first_name().lower()}{fake.random_int(100, 999)}@gmail.com"
        password = fake.password()
        description = fake.text(max_nb_chars=200)
        
        driver.get("https://www.mamba.ru")
        time.sleep(random.uniform(3, 7))
        if driver.find_elements(By.CLASS_NAME, "captcha-form"):
            await send_log("CAPTCHA –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return None
        
        # –ü–æ–∫—É–ø–∫–∞ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ Vak SMS (–ø–æ–ø—Ä–æ–±—É–µ–º –æ–±–µ –≤–µ—Ä—Å–∏–∏ API)
        number, number_id, api_version = await get_vak_sms_number()
        if not number:
            await send_log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            return None
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        driver.find_element(By.ID, "email").send_keys(login)
        driver.find_element(By.ID, "password").send_keys(password)
        driver.find_element(By.ID, "name").send_keys(base_name)
        driver.find_element(By.ID, "age").send_keys(str(age))
        driver.find_element(By.ID, "gender").find_element(By.XPATH, "//option[@value='female']").click()
        driver.find_element(By.ID, "description").send_keys(description)
        driver.find_element(By.ID, "phone").send_keys(number)
        driver.find_element(By.ID, "submit").click()
        time.sleep(random.uniform(3, 7))
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –≤–µ—Ä—Å–∏—é API, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–º–µ—Ä)
        code = await get_vak_sms_code(number_id, api_version)
        if code:
            driver.find_element(By.ID, "code").send_keys(code)
            driver.find_element(By.ID, "verify").click()
            time.sleep(random.uniform(3, 7))
            token = driver.execute_script("return localStorage.getItem('auth_token')")
            photos = random.sample(list(PHOTO_DIR.glob("*.jpg")), k=min(3, len(list(PHOTO_DIR.glob("*.jpg")))))
            profile_id = await conn.fetchval(
                "INSERT INTO profiles (login, password, name, age, description, status, likes_count, chats_count, token, photos) "
                "VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING id",
                login, password, base_name, age, description, "active", 0, 0, token, [str(p) for p in photos]
            )
            await upload_photos(driver, profile_id, conn, photos)
            await send_log(f"–ê–Ω–∫–µ—Ç–∞ ID{profile_id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            return profile_id
        else:
            await send_log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            return None
    except Exception as e:
        await send_log(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return None

async def upload_photos(driver, profile_id: int, conn, photos: list):
    try:
        driver.get("https://www.mamba.ru/profile/photos")
        time.sleep(random.uniform(3, 7))
        if driver.find_elements(By.CLASS_NAME, "captcha-form"):
            await send_log("CAPTCHA –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        for photo in photos:
            driver.find_element(By.ID, "photo-upload").send_keys(str(photo))
            time.sleep(random.uniform(1, 3))
            driver.find_element(By.ID, "photo-submit").click()
            time.sleep(random.uniform(1, 3))
        await conn.execute("UPDATE profiles SET photos = $1 WHERE id = $2", [str(p) for p in photos], profile_id)
        await send_log(f"–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è ID{profile_id}")
    except Exception as e:
        await send_log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ ID{profile_id}: {e}")

async def start_liking(driver, profile_id: int, conn, context):
    try:
        driver.get("https://www.mamba.ru/login")
        time.sleep(random.uniform(3, 7))
        conn_profile = await conn.fetchrow("SELECT login, password FROM profiles WHERE id = $1", profile_id)
        driver.find_element(By.ID, "email").send_keys(conn_profile["login"])
        driver.find_element(By.ID, "password").send_keys(conn_profile["password"])
        driver.find_element(By.ID, "login").click()
        time.sleep(random.uniform(3, 7))
        
        driver.get("https://www.mamba.ru/search")
        time.sleep(random.uniform(3, 7))
        likes_limit = 200
        likes = 0
        while likes < likes_limit:
            if driver.find_elements(By.CLASS_NAME, "captcha-form"):
                await send_log(f"CAPTCHA –ø—Ä–∏ –ª–∞–π–∫–∏–Ω–≥–µ –¥–ª—è ID{profile_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", context)
                break
            like_button = driver.find_element(By.CLASS_NAME, "like-button")
            like_button.click()
            likes += 1
            await conn.execute("UPDATE profiles SET likes_count = likes_count + 1 WHERE id = $1", profile_id)
            chats = await count_chats(driver, profile_id, conn)
            await conn.execute("UPDATE profiles SET chats_count = $1 WHERE id = $2", chats, profile_id)
            if likes % 50 == 0:
                await update_message(context, profile_id, likes, chats)
            time.sleep(random.uniform(5, 10))
        await update_message(context, profile_id, likes, chats)
        if likes >= likes_limit:
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"üéâ –ê–∫–∫–∞—É–Ω—Ç ID{profile_id} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ 200 –ª–∞–π–∫–æ–≤!")
        return likes
    except Exception as e:
        logger.error(f"Liking error for ID{profile_id}: {e}")
        return 0

async def count_chats(driver, profile_id: int, conn):
    try:
        driver.get("https://www.mamba.ru/chats")
        time.sleep(random.uniform(3, 7))
        chats = len(driver.find_elements(By.CLASS_NAME, "chat-item"))
        await conn.execute("UPDATE profiles SET chats_count = $1 WHERE id = $2", chats, profile_id)
        logger.info(f"Profile ID{profile_id}: {chats} chats")
        return chats
    except Exception as e:
        logger.error(f"Chat count error for ID{profile_id}: {e}")
        return 0

async def start_spam(driver, profile_id: int, conn, telegram_username):
    try:
        driver.get("https://www.mamba.ru/chats")
        time.sleep(random.uniform(3, 7))
        chats = driver.find_elements(By.CLASS_NAME, "chat-item")
        messages_sent = 0
        for chat in chats:
            if messages_sent >= 10:
                break
            if driver.find_elements(By.CLASS_NAME, "captcha-form"):
                await send_log("CAPTCHA –ø—Ä–∏ —Å–ø–∞–º–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                break
            name = chat.find_element(By.CLASS_NAME, "chat-name").text
            chat.click()
            time.sleep(random.uniform(1, 3))
            message = random.choice(SPAM_TEMPLATES).format(name=name, contact="[–∫–æ–Ω—Ç–∞–∫—Ç]")
            driver.find_element(By.CLASS_NAME, "message-input").send_keys(message)
            contact_button = driver.find_element(By.CLASS_NAME, "attach-button")
            contact_button.click()
            time.sleep(random.uniform(1, 2))
            driver.find_element(By.CLASS_NAME, "contact-option").click()
            driver.find_element(By.ID, "contact-input").send_keys(telegram_username)
            driver.find_element(By.ID, "send-contact").click()
            messages_sent += 1
            time.sleep(random.uniform(3, 7))
        await send_log(f"–°–ø–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è ID{profile_id}: {messages_sent} —Å–æ–æ–±—â–µ–Ω–∏–π")
    except Exception as e:
        await send_log(f"–û—à–∏–±–∫–∞ —Å–ø–∞–º–∞ ID{profile_id}: {e}")

async def update_message(context, profile_id, likes, chats):
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ID{profile_id}: {likes} –ª–∞–π–∫–æ–≤, {chats} —á–∞—Ç–æ–≤")

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç chat_id: {update.message.chat_id}")
    if str(update.message.chat_id) != ADMIN_CHAT_ID:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        logger.info(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è chat_id: {update.message.chat_id}")
        return
    await update.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())
    await send_log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", context)

async def handle_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.message.chat_id) != ADMIN_CHAT_ID:
        return
    await update.message.reply_text("üì• –°–∫–æ–ª—å–∫–æ –∞–Ω–∫–µ—Ç —Å–æ–∑–¥–∞—Ç—å (1‚Äì500)?", reply_markup=get_cancel_keyboard())
    context.user_data['state'] = 'registration_count'
    logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∫–µ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

async def process_registration_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') != 'registration_count':
        return
    try:
        count = int(update.message.text)
        if count < 1 or count > 500:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 500.", reply_markup=get_main_menu())
            return
        if not await check_vak_sms_balance():
            await update.message.reply_text("üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ Vak SMS.", reply_markup=get_main_menu())
            return

        conn = await init_db()
        settings = await conn.fetch("SELECT * FROM settings")
        extra_names = next((s['value'].split(',') for s in settings if s['key'] == 'extra_names'), [])
        name_variations = [next((s['value'] for s in settings if s['key'] == 'name'), '–ê–Ω–∞—Å—Ç–∞—Å–∏—è')] + extra_names
        driver = setup_driver()
        successful_registrations = 0
        try:
            for i in range(count):
                profile_id = await register_profile(driver, conn, settings)
                if profile_id:
                    successful_registrations += 1
        finally:
            driver.quit()
            await conn.close()
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"üéâ –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {successful_registrations} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ {count}!")
        await update.message.reply_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=get_main_menu())
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=get_main_menu())
    except Exception as e:
        await send_log(f"–û—à–∏–±–∫–∞ –≤ process_registration_count: {e}", context)
    finally:
        context.user_data['state'] = None

async def handle_liking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.message.chat_id) != ADMIN_CHAT_ID:
        return
    try:
        conn = await init_db()
        profiles = await conn.fetch("SELECT id FROM profiles WHERE status = 'active' AND likes_count < 200")
        driver = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º driver –∫–∞–∫ None
        try:
            driver = setup_driver()
            for profile in profiles:
                profile_id = profile["id"]
                try:
                    likes = await start_liking(driver, profile_id, conn, context)
                except Exception as e:
                    await send_log(f"–û—à–∏–±–∫–∞ –ª–∞–π–∫–∏–Ω–≥–∞ –¥–ª—è ID{profile_id}: {e}", context)
        finally:
            if driver:
                try:
                    driver.quit()
                except Exception as e:
                    await send_log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}", context)
            await conn.close()
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text="‚úÖ –õ–∞–π–∫–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
    except Exception as e:
        await send_log(f"–û—à–∏–±–∫–∞ –≤ handle_liking: {e}", context)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ª–∞–π–∫–∏–Ω–≥–∞.", reply_markup=get_main_menu())

async def handle_update_token(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.message.chat_id) != ADMIN_CHAT_ID:
        return
    try:
        conn = await init_db()
        profiles = await conn.fetch("SELECT id, login, password FROM profiles")
        driver = setup_driver()
        try:
            for profile in profiles:
                driver.get("https://www.mamba.ru/login")
                time.sleep(random.uniform(3, 7))
                driver.find_element(By.ID, "email").send_keys(profile["login"])
                driver.find_element(By.ID, "password").send_keys(profile["password"])
                driver.find_element(By.ID, "login").click()
                time.sleep(random.uniform(3, 7))
                token = driver.execute_script("return localStorage.getItem('auth_token')")
                status = "active" if driver.find_elements(By.CLASS_NAME, "profile-active") else "banned"
                await conn.execute("UPDATE profiles SET token = $1, status = $2 WHERE id = $3", token, status, profile["id"])
                await update_message(context, profile["id"], 0, 0)
        finally:
            driver.quit()
            await conn.close()
        await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=get_main_menu())
    except Exception as e:
        await send_log(f"–û—à–∏–±–∫–∞ –≤ handle_update_token: {e}", context)

async def handle_upload_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.message.chat_id) != ADMIN_CHAT_ID:
        return
    await update.message.reply_text("üì∏ –°–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π?", reply_markup=get_cancel_keyboard())
    context.user_data['state'] = 'upload_photos_count'

async def process_upload_photos_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') != 'upload_photos_count':
        return
    try:
        count = int(update.message.text)
        if count < 1 or count > 500:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 500.", reply_markup=get_main_menu())
            return
        await update.message.reply_text(f"üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {count} —Ñ–æ—Ç–æ (—Å–∂–∞—Ç—ã–µ –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ –∞–Ω–∫–µ—Ç—É). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /finish_upload –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ.")
        context.user_data['state'] = 'upload_photos_files'
        context.user_data['upload_count'] = count
        context.user_data['photos_received'] = 0
        context.user_data['photos'] = []
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=get_main_menu())
    except Exception as e:
        await send_log(f"–û—à–∏–±–∫–∞ –≤ process_upload_photos_count: {e}", context)

async def process_upload_photos_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') != 'upload_photos_files':
        return
    try:
        count = context.user_data.get('upload_count', 0)
        photos_received = context.user_data.get('photos_received', 0)
        photos = context.user_data.get('photos', [])
        if update.message.photo:
            if photos_received >= count:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ.", reply_markup=get_main_menu())
                context.user_data.clear()
                return
            photo_file = await update.message.photo[-1].get_file()
            photo_path = f"photos/uploaded_{update.message.photo[-1].file_id}.jpg"
            await photo_file.download_to_drive(photo_path)
            photos.append(photo_path)
            photos_received += 1
            context.user_data['photos_received'] = photos_received
            context.user_data['photos'] = photos
            await update.message.reply_text(f"üì∏ –§–æ—Ç–æ {photos_received}/{count} –¥–æ–±–∞–≤–ª–µ–Ω–æ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {photo_path}). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /finish_upload.")
        elif update.message.text == "/finish_upload":
            if photos_received == 0:
                await update.message.reply_text("‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ.", reply_markup=get_main_menu())
                context.user_data.clear()
                return
            if photos_received < count:
                await update.message.reply_text(f"‚ö†Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ {photos_received} –∏–∑ {count} —Ñ–æ—Ç–æ. –ó–∞–≤–µ—Ä—à–∏—Ç—å?")
                return
            conn = await init_db()
            profiles = await conn.fetch("SELECT id, login, password FROM profiles WHERE status = 'active' LIMIT $1", count)
            driver = setup_driver()
            try:
                for i, profile in enumerate(profiles):
                    if i < len(photos):
                        await upload_photos(driver, profile["id"], conn, [photos[i]])
                    else:
                        await upload_photos(driver, profile["id"], conn, [])
            finally:
                driver.quit()
                await conn.close()
            await update.message.reply_text("üñºÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=get_main_menu())
            context.user_data.clear()
        else:
            await update.message.reply_text(f"üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /finish_upload (–ø–æ–ª—É—á–µ–Ω–æ {photos_received}/{count}).")
    except Exception as e:
        await send_log(f"–û—à–∏–±–∫–∞ –≤ process_upload_photos_files: {e}", context)

async def handle_delete_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.message.chat_id) != ADMIN_CHAT_ID:
        return
    try:
        conn = await init_db()
        profiles = await conn.fetch("SELECT id, login, password FROM profiles WHERE status = 'active'")
        driver = setup_driver()
        try:
            for profile in profiles:
                driver.get("https://www.mamba.ru/profile/photos")
                time.sleep(random.uniform(3, 7))
                photos = driver.find_elements(By.CLASS_NAME, "photo-item")
                for photo in photos:
                    photo.find_element(By.CLASS_NAME, "delete-button").click()
                    time.sleep(random.uniform(1, 3))
                await conn.execute("UPDATE profiles SET photos = $1 WHERE id = $2", [], profile["id"])
                await send_log(f"–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω—ã –¥–ª—è ID{profile['id']}")
        finally:
            driver.quit()
            await conn.close()
        await update.message.reply_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=get_main_menu())
    except Exception as e:
        await send_log(f"–û—à–∏–±–∫–∞ –≤ handle_delete_photos: {e}", context)

async def handle_spam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.message.chat_id) != ADMIN_CHAT_ID:
        return
    await update.message.reply_text("üí¨ –°–∫–æ–ª—å–∫–æ –∞–Ω–∫–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–ø–∞–º–∞ (1‚Äì500)?", reply_markup=get_cancel_keyboard())
    context.user_data['state'] = 'spam_count'

async def process_spam_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') != 'spam_count':
        return
    try:
        count = int(update.message.text)
        if count < 1 or count > 500:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 500.", reply_markup=get_main_menu())
            return
        conn = await init_db()
        telegram_username = await conn.fetchval("SELECT value FROM settings WHERE key = 'telegram_username'") or '@MyBot'
        profiles = await conn.fetch("SELECT id, login, password FROM profiles WHERE status = 'active' LIMIT $1", count)
        driver = setup_driver()
        try:
            for profile in profiles:
                driver.get("https://www.mamba.ru/login")
                time.sleep(random.uniform(3, 7))
                driver.find_element(By.ID, "email").send_keys(profile["login"])
                driver.find_element(By.ID, "password").send_keys(profile["password"])
                driver.find_element(By.ID, "login").click()
                time.sleep(random.uniform(3, 7))
                await start_spam(driver, profile["id"], conn, telegram_username)
        finally:
            driver.quit()
            await conn.close()
        await update.message.reply_text("üì® –°–ø–∞–º –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=get_main_menu())
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=get_main_menu())
    except Exception as e:
        await send_log(f"–û—à–∏–±–∫–∞ –≤ process_spam_count: {e}", context)
    finally:
        context.user_data['state'] = None

async def handle_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.message.chat_id) != ADMIN_CHAT_ID:
        return
    try:
        conn = await init_db()
        profiles = await conn.fetch("SELECT id, likes_count, chats_count FROM profiles WHERE status = 'active'")
        stats_message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n"
        for profile in profiles:
            stats_message += f"ID{profile['id']}: {profile['likes_count']} –ª–∞–π–∫–æ–≤, {profile['chats_count']} —á–∞—Ç–æ–≤\n"
        await update.message.reply_text(stats_message or "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—Ñ–∏–ª—è—Ö.", reply_markup=get_main_menu())
    except Exception as e:
        await send_log(f"–û—à–∏–±–∫–∞ –≤ handle_statistics: {e}", context)

async def settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.message.chat_id) != ADMIN_CHAT_ID:
        return
    keyboard = [["–ò–º—è üìõ", "–í–æ–∑—Ä–∞—Å—Ç üéÇ"], ["Telegram üí¨", "–î–æ–ø. –∏–º–µ–Ω–∞ ‚ûï"], ["–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ üö´"]]
    await update.message.reply_text("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    context.user_data['state'] = 'settings'

async def handle_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') != 'settings':
        return
    text = update.message.text
    if text in ["–ò–º—è üìõ", "–í–æ–∑—Ä–∞—Å—Ç üéÇ", "Telegram üí¨", "–î–æ–ø. –∏–º–µ–Ω–∞ ‚ûï"]:
        key = {"–ò–º—è üìõ": "name", "–í–æ–∑—Ä–∞—Å—Ç üéÇ": "age", "Telegram üí¨": "telegram_username", "–î–æ–ø. –∏–º–µ–Ω–∞ ‚ûï": "extra_names"}[text]
        context.user_data['setting_key'] = key
        await update.message.reply_text(f"üìù –í–≤–µ–¥–∏—Ç–µ {text.split()[0]}:", reply_markup=ReplyKeyboardRemove())
        context.user_data['state'] = 'save_setting'
    else:
        await update.message.reply_text("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É.", reply_markup=get_main_menu())
        context.user_data['state'] = None

async def save_setting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') != 'save_setting':
        return
    key = context.user_data.get('setting_key')
    value = update.message.text
    try:
        conn = await init_db()
        await conn.execute("INSERT INTO settings (key, value) VALUES ($1, $2) ON CONFLICT (key) DO UPDATE SET value = $2", key, value)
        await conn.close()
        await update.message.reply_text(f"‚úÖ {key} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {value}", reply_markup=get_main_menu())
        await send_log(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {key}: {value}", context)
    except Exception as e:
        await send_log(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}", context)
    finally:
        context.user_data['state'] = None

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
    if text == "–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ üö´":
        context.user_data.clear()
        await update.message.reply_text("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
        return
    if context.user_data.get('state') == 'registration_count':
        await process_registration_count(update, context)
    elif context.user_data.get('state') == 'upload_photos_count':
        await process_upload_photos_count(update, context)
    elif context.user_data.get('state') == 'upload_photos_files':
        await process_upload_photos_files(update, context)
    elif context.user_data.get('state') == 'spam_count':
        await process_spam_count(update, context)
    elif context.user_data.get('state') == 'settings':
        await handle_settings(update, context)
    elif context.user_data.get('state') == 'save_setting':
        await save_setting(update, context)
    elif text == "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üìù":
        await handle_registration(update, context)
    elif text == "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–∞–π–∫–∏–Ω–≥ üëç":
        await handle_liking(update, context)
    elif text == "–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω üîë":
        await handle_update_token(update, context)
    elif text == "–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üñºÔ∏è":
        await handle_upload_photos(update, context)
    elif text == "–£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚ùå":
        await handle_delete_photos(update, context)
    elif text == "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ø–∞–º üí¨":
        await handle_spam(update, context)
    elif text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä":
        await handle_statistics(update, context)
    elif text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è":
        await settings_menu(update, context)

def main():
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(MessageHandler(filters.PHOTO, process_upload_photos_files))
        application.add_handler(MessageHandler(filters.Text() & ~filters.Command(), message_handler))
        application.add_handler(CommandHandler("finish_upload", process_upload_photos_files))
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
        logger.info("–ó–∞–ø—É—Å–∫ polling...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        logger.info("Polling –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    main()
